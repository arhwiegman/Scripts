# download.2.mem ###########################################
# downloads a file to a path using memory in R
download.2.mem <- function(url,path){
download.file(url=url,
destfile=path, method='curl')
cat(url,'\n downloaded to local disk at: \n',path)
}
# download.2.disk ###########################################
# dowloads web file directly to path doesn't store in memory
download.2.disk <- function(url, path){
library('RCurl')
f = CFILE(path, mode="wb")
a = curlPerform(url = url, writedata = f@ref, noprogress=FALSE)
close(f)
return(a)
}
# find.links.in.html ##########################################
# returns a list website links from an html page
# inputs: http - a string with a webpage url
find.links.in.html <- function (http='https://www.google.com/'){
require(rvest)
links <- http %>%
read_html %>%
html_nodes("a") %>% # find all links <a </a>
html_attr("href")  # get the url
return(links)
}
find.links.in.html()
# ask.2.continue.popbox #########################################
# makes a sound and asks user to type yes or no to continue script
Yes.2.continue.popbox <- function(){
beepr::beep(sound='coin')
question <- paste("Type 'Yes' to continue")
. <- svDialogs::dlgInput(question, Sys.info()["user"])$res
if(.!='Yes')stop('...loop aborted')
}
# ask.4.URLs.popbox ######################################()
ask.4.URLs.popbox <- function(){
proceed <- 0
URLs <- NULL
while (proceed == 0){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(., Sys.info()["user"])$res
URLs <- c(URLs,.)
. <- "To add another URL enter 0 to proceed with file download enter 1"
proceed <- svDialogs::dlgInput(., Sys.info()["user"])$res
}
ask.4.URLs.popbox()
# ask.4.URLs.popbox ######################################()
ask.4.URLs.popbox <- function(){
proceed <- 0
URLs <- NULL
while (proceed == 0){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(.)$res
URLs <- c(URLs,.)
. <- "To add another URL enter '0' to proceed with file download enter '1'"
proceed <- svDialogs::dlgInput(.)$res
}
ask.4.URLs.popbox()
ask.4.destpath.popbox <- function(npaths=1){
destpath <- vector(mode="character", length=npaths) # initialize destination paths
#loop to ask user to enter destination folders
for (i in seq_len(npaths)){
. <- "Enter destination path (use '/' to denote child directories):"
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
while (!dir.exists(destpath[i])){
. <- paste(destpath[i],"does not exist, please enter a valid destination path:")
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
}#end while loop
return(destpath)
}#end for loop
}#end function definition
ask.4.destpath.popbox <- function(npaths=1){
destpath <- vector(mode="character", length=npaths) # initialize destination paths
#loop to ask user to enter destination folders
for (i in seq_len(npaths)){
. <- "Enter destination path (format 'C:/parent/folder/' to denote child directories):"
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
while (!dir.exists(destpath[i])){
. <- paste(destpath[i],"does not exist, please enter a valid destination path:")
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
}#end while loop
return(destpath)
}#end for loop
}#end function definition
ask.4.destpath.popbox()
ask.4.destpath.popbox <- function(npaths=1){
destpath <- vector(mode="character", length=npaths) # initialize destination paths
#loop to ask user to enter destination folders
for (i in seq_len(npaths)){
. <- "Enter destination path (format: 'C:/parent/folder/')"
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
while (!dir.exists(destpath[i])){
. <- paste(destpath[i],"does not exist, please enter a valid destination path")
. <- svDialogs::dlgInput(.)$res
destpath[i] <- .
}#end while loop
return(destpath)
}#end for loop
}#end function definition
ask.4.destpath.popbox()
#Loading packages
library('rvest')
library('stringr')
if (file.exists("functions.R")) source("functions.R")
#Specify the url for desired website to be scrapped
urls <- ask.4.URLs.popbox()
#Specify the destination folders of downloaded data
# dst <- c('D:/GISdata/VTgeodata/NAIP/2016/',
#          'D:/GISdata/VTgeodata/NAIP/2014/',
#          'D:/GISdata/VTgeodata/NAIP/2011/')
# remove forward slashes and
dst <- ask.4.destpath.popbox()
# create new dir with list of paths
sapply(dst,if(dir.exists(dst))dir.create)
(dst,if(!dir.exists(dst))dir.create)
# create new dir with list of paths
sapply(dst,if(!dir.exists(dst))dir.create)
# create new dir with list of paths
sapply(dst,if(!dir.exists(dst))dir.create(dst))
# create new dir with list of paths
for (i in dst){print(dst)}
# create new dir with list of paths
for (i in dst){
if(!dir.exists(i)) dir.create(i)
}
# MAIN PROGRAM -----------------------------
i <- 1
#Read the HTML code from the website
webpage <- read_html(urls[i])
source('C:/Scripts/R/downloadFiles.R', echo=TRUE)
urls
urls <- ask.4.URLs.popbox()
print(urls)
# ask.4.URLs.popbox ######################################()
ask.4.URLs.popbox <- function(){
proceed <- 0
URLs <- c()
while (proceed == 0){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(.)$res
URLs <- c(URLs,.)
. <- "To add another URL enter '0' to proceed with file download enter '1'"
proceed <- svDialogs::dlgInput(.)$res
}
ask.4.URLs.popbox()
#Specify the url for desired website to be scrapped
urls <- ask.4.URLs.popbox()
print(urls)
# ask.4.URL.popbox ######################################()
ask.4.URL.popbox <- function(){
proceed <- 0
while (proceed == 0){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(.)$res
URL <- .
. <- "To add another URL enter '0' to proceed with file download enter '1'"
proceed <- svDialogs::dlgInput(.)$res
}
#Loading packages
library('rvest')
library('stringr')
if (file.exists("functions.R")) source("functions.R")
#Specify the url for desired website to be scrapped
urls <- ask.4.URL.popbox()
print(urls)
# ask.4.URL.popbox ######################################()
ask.4.URL.popbox <- function(){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(.)$res
URL <- .
}
ask.4.URL.popbox()
# ask.4.URLs.popbox ######################################()
ask.4.URLs.popbox <- function(){
proceed <- 0
URLs <- NULL
while (proceed == 0){
. <- "Copy URL with download links here:"
. <- svDialogs::dlgInput(., Sys.info()["user"])$res
URLs <- c(URLs,.)
. <- "To add another URL enter 0 to proceed with file download enter 1"
proceed <- svDialogs::dlgInput(., Sys.info()["user"])$res
}
return(URLs)
}
ask.4.URLs.popbox()
#Loading packages
library('rvest')
source('C:/Scripts/R/downloadFiles.R', echo=TRUE)
dst
dstname <- paste(dst,names[j],sep="/")
dstname
choose.dir(default = "", caption = "Select folder")
choose.dir(default = "C:\\temp", caption = "Select folder to save files")
source('C:/Scripts/R/downloadFiles.R', echo=TRUE)
# Structural Equation Modeling
install.packages("sem")
# Structural Equation Modeling
#install.packages("sem")
library(sem)
data(Klein)
View(Klein)
Klein$P.lag <- c(NA,Klein$P[-22])
Klein$X.lag <- c(NA,Klein$X[-22])
I(Wp+Wg)
(C~P+P.lag+I(Wp+Wg),
instruments=~G+T+wg+I(Year-1931)+K.lag+P.lag+X.lag, data=Klein)
# tsls two-stage least squares
# I(Wp+Wg) I as a function of Wp+Wg
Klein.eqn1 <- tsls(C~P+P.lag+I(Wp+Wg),instruments=~G+T+wg+I(Year-1931)+K.lag+P.lag+X.lag, data=Klein)
# tsls two-stage least squares
# I(Wp+Wg) I as a function of Wp+Wg
Klein.eqn1 <- tsls(C~P+P.lag+I(Wp+Wg),instruments=~G+T+Wg+I(Year-1931)+K.lag+P.lag+X.lag, data=Klein)
# tsls two-stage least squares
# I(Wp+Wg) I as a function of Wp+Wg
Klein.eqn1 <- tsls(C~P+P.lag+I(Wp+Wg),instruments=~G+T+Wg+I(Year-1931)+K.lag+P.lag+X.lag, data=Klein)
Klein.eqn2 <- tsls(I ~ P + P.lag + K.lag, instruments=~G+T+Wg+ I(Year - 1931) + K.lag + P.lag + X.lag, data=Klein)
Klein.eqn3 <- tsls(Wp ~ X + X.lag + I(Year - 1931), instruments=~G+T+Wg+ I(Year - 1931) + K.lag + P.lag + X.lag,data=Klein)
Klein.eqn1
summary(Klein.eqn1)
summary(Klein.eqn2)
